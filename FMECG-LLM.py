"""
   This is the main file of the framework. The framework is used to measure the
   statistics of the code generated by the LLMs. The framework takes an input
   json file as input. The input json file should contain the mode of the
   framework and the prompts for the LLMs. The framework will then generate
   code using the connected LLMs and measure the statistics of the code.
"""



from modules.input_processor import InputProcessor
from modules.process_code_prompt import ProcessCodePrompt
from modules.check_code_validity import CheckCodeValidity
from modules.output_parser import OutputParser
from modules.measure_statistics import MeasureStatistics

import argparse
import os


def main(mode, prompts, prompt_labels):
    output_dirs = ['output_run0', 'output_run1', 'output_run2', 'output_run3', 'output_run4', 'output_run5', 'output_run6', 'output_run7', 'output_run8', 'output_run9']
    for output_dir in output_dirs:
        # Check if the output directory exists
        if not os.path.exists(output_dir):
            print(f"Directory {output_dir} does not exist")
            return

        process_mode_and_code_prompt_obj = ProcessCodePrompt(mode, prompts, prompt_labels)
        outputs = process_mode_and_code_prompt_obj.process_code_prompts()

        if outputs == []:
            return

        # Save the output of the LLMs to a file so that it can be reviewed
        # later if needed
        with open(output_dir + '/llm_output.json', 'w') as f:
            f.write(outputs)

        # When the output of the LLMs is only code that does not need to be checked,
        # the check_code_validity object will can be skipped
        check_code_validity_obj = CheckCodeValidity(outputs)
        outputs = check_code_validity_obj.check_code_validity()

        measurement_tools_handler_obj = MeasureStatistics()
        measurement_tools_handler_obj.initialize_all_tools()

        checked_output = measurement_tools_handler_obj.measure_statistics(outputs)

        output_parser_obj = OutputParser(checked_output)
        print(output_parser_obj.parse_output(output_dir + '/output_with_statistics.json'))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="LLM Energy Connect")
    parser.add_argument("input_file", type=str, help="Input json file")
    args = parser.parse_args()

    input_parser_obj = InputProcessor(args.input_file)
    input_parser_obj.process_input()

    mode = input_parser_obj.get_mode()
    prompts = input_parser_obj.get_prompts()
    prompt_labels = input_parser_obj.get_prompt_labels()

    main(mode, prompts, prompt_labels)
